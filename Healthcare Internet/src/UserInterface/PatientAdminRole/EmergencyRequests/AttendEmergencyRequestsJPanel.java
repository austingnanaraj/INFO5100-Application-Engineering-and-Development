/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.PatientAdminRole.EmergencyRequests;

import Business.Doctor.Doctor;
import Business.EcoSystem;
import Business.Encounter.Encounter;
import Business.Encounter.EncounterHistory;
import Business.Enterprise.Enterprise;
import Business.Enterprise.HospitalEnterprise;
import Business.Network.Network;
import Business.Organization.PatientAdminOrganization;
import Business.Patient.Patient;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.DoctorRequestsPatientDetail;
import Business.WorkQueue.WorkRequest;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author AustinGnanaraj
 */
public class AttendEmergencyRequestsJPanel extends javax.swing.JPanel {

    /**
     * Creates new form AttendRequestsJPanel
     */
    JPanel userProcessContainer;
    Enterprise enterprise;
    UserAccount userAccount;
    PatientAdminOrganization organization;
    EcoSystem eco;
    HospitalEnterprise hospitalEnterprise;
    Patient patient;

    EncounterHistory ee;

    public AttendEmergencyRequestsJPanel(JPanel userProcessContainer, Enterprise enterprise, UserAccount userAccount, PatientAdminOrganization organization, EcoSystem eco) {
        initComponents();
        this.userAccount = userAccount;
        this.userProcessContainer = userProcessContainer;
        this.enterprise = enterprise;
        this.organization = organization;
        this.eco = eco;
        btnAuthorize.setEnabled(false);
        populateRequests();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btnAuthorize = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Patient SSN", "Status", "Sender", "Patient Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
        }

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 40, 720, 110));

        btnAuthorize.setText("Send Details");
        btnAuthorize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAuthorizeActionPerformed(evt);
            }
        });
        add(btnAuthorize, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 200, 210, 70));

        jButton1.setText("Check Patient Availability");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 200, 250, 70));

        jButton2.setText("Respond with message");
        add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 240, 310, 30));

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 200, 310, 30));
    }// </editor-fold>//GEN-END:initComponents

    private void btnAuthorizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAuthorizeActionPerformed
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow >= 0) {
            DoctorRequestsPatientDetail doctorRequest = (DoctorRequestsPatientDetail) jTable1.getValueAt(selectedRow, 0);
            DoctorRequestsPatientDetail docDup = new DoctorRequestsPatientDetail();
            docDup.setPatientName(doctorRequest.getPatientName());
            docDup.setPatientSSN(doctorRequest.getPatientSSN());
            docDup.setStatus("Data Available");
            docDup.setDoctor(doctorRequest.getDoctor());
            docDup.setSender(userAccount);
            docDup.setResolveDate(null); // add date
            eco.getEmergencyRequestDirectory().getWorkRequestList().add(docDup);
            doctorRequest.getSender().getWorkQueue().getWorkRequestList().add(docDup);

            Doctor doctor = doctorRequest.getDoctor();
            for (Network n : eco.getNetworkList()) {
                for (Enterprise en : n.getEnterpriseDirectory().getEnterpriseList()) {
                    if (en instanceof HospitalEnterprise) {
                        for (Doctor doct : ((HospitalEnterprise) en).getDoctorDirectory().getDoctorDirectory()) {
                            if (doctor.getName().equals(doct.getName())) {

                                Patient p = doct.getPatientEnquiryDirectory().createpatient();
                                p.setAddress(patient.getAddress());
                                p.setDob(patient.getDob());
                                p.setDoctor(doctor);
                                p.setDrugPrescriptionDirectory(patient.getDrugPrescriptionDirectory());
                                p.setEncounterHistory(patient.getEncounterHistory());
                                p.setName(patient.getName());
                                p.setPhoneNumber(patient.getPhoneNumber());
                                p.setSsn(patient.getSsn());
                                p.setVitalSignHistory(patient.getVitalSignHistory());
                                // Encounter created = ee.addToEncounterHistory(e);

                                JOptionPane.showMessageDialog(null, "Information is now shared");
                                break;
                            }
                        }
                    }

                }

            }
        } else {
            JOptionPane.showMessageDialog(null, "Select a row");
        }

    }//GEN-LAST:event_btnAuthorizeActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row");
        }
        DoctorRequestsPatientDetail doc1 = (DoctorRequestsPatientDetail) jTable1.getValueAt(selectedRow, 0);
        int ab;
        ab = ((HospitalEnterprise) enterprise).getPatientDirectory().getPatientDirectory().size();
        boolean a = true;
        if (a == true) {
            if (ab > 0) {
                for (Patient p : ((HospitalEnterprise) enterprise).getPatientDirectory().getPatientDirectory()) {
                    if (doc1.getPatientSSN().equals(p.getSsn())) {
                        JOptionPane.showMessageDialog(null, "Patient Found");
                        this.patient = p;
                        btnAuthorize.setEnabled(true);

                        break;
                    }
                    a = false;
                }
            } else {
                a = false;
            }
        }

        if (a == false) {
            btnAuthorize.setEnabled(false);
            JOptionPane.showMessageDialog(null, "Patient Not Found");
        }

    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAuthorize;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

    private void populateRequests() {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);

        for (WorkRequest work : eco.getEmergencyRequestDirectory().getWorkRequestList()) {
            DoctorRequestsPatientDetail work1 = (DoctorRequestsPatientDetail) work;
            Object[] row = new Object[4];
            row[0] = work1;
            row[1] = work1.getStatus();
            row[2] = work1.getSender().getPerson().getName();
            row[3] = work1.getPatientName();
            model.addRow(row);

        }

    }

}
